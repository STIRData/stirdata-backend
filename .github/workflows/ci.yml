name: Maven Docker CI

on: 
  push:
    branches:
      - dev
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      PROJECT: "stirdata"
      APP: "backend"
      DEPLOY_USER: deploy
      CONTAINER_NAME: "stirdata-backend"


    steps:
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Set env for development
      if: endsWith(github.ref, '/dev')
      run: |
        echo DEPLOY_SERVER=hotwheels.ails.ece.ntua.gr >> $GITHUB_ENV              
    - name: Set env for production
      if: endsWith(github.ref, '/main')
      run: |
        echo DEPLOY_SERVER=lego.ails.ece.ntua.gr >> $GITHUB_ENV           


    - uses: actions/checkout@v2

    - uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Cache mvn packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.OS }}-mvn-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.OS }}-mvn-
          ${{ runner.OS }}-

    - name: Login to docker repo 
      run: echo "${{ secrets.WITH_DOCKER_KEY }}" | docker login -u=builder --password-stdin ${PROJECT}.docker.ails.ece.ntua.gr 

    - name: Jib build
      run: mvn -DskipTests -B -e compile jib:build -Dmaven.test.skip=true -Djib.to.tags=${GITHUB_SHA::7},${{ steps.extract_branch.outputs.branch }},${GITHUB_RUN_ID}

    - name: Deploy to Server
      run: |
        echo "${{ secrets.WITH_CI_SSH_KEY }}" > /tmp/sshkey
        chmod 600 /tmp/sshkey 
        ssh -i /tmp/sshkey -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_SERVER} "cd /etc/docker && DOCKER_CONFIG=~/.docker  /usr/local/bin/docker-compose pull ${CONTAINER_NAME}-${{ steps.extract_branch.outputs.branch }} && /usr/local/bin/docker-compose up -d ${CONTAINER_NAME}-${{ steps.extract_branch.outputs.branch }} "

